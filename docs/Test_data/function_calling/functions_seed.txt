"/swap": lambda: self.swap(),
"/agent select": lambda: self.agent_prompt_select(),
"/voice swap": lambda: self.voice_swap(),
"/save as": lambda: self.save_to_json(self.save_name, self.user_input_model_select),
"/load as": lambda: self.load_from_json(self.load_name, self.user_input_model_select),
"/write modelfile": lambda: self.model_write_class_instance.write_model_file(),
"/convert tensor": lambda: self.create_convert_manager_instance.safe_tensor_gguf_convert(self.tensor_name),
"/convert gguf": lambda: self.model_write_class_instance.write_model_file_and_run_agent_create_gguf(self.listen_flag, self.model_git),
"/listen on": lambda: self.listen(),
"/listen off": lambda: self.listen(),
"/voice off": lambda: self.voice(True),
"/voice on": lambda: self.voice(False),
"/speech on": lambda: self.speech(False, True),
"/speech off": lambda: self.speech(True, False),
"/wake on" : lambda: self.wake_commands(True),
"/wake off" : lambda: self.wake_commands(False),
"/latex on": lambda: self.latex(True),
"/latex off": lambda: self.latex(False),
"/command auto on": lambda: self.auto_commands(True),
"/command auto off": lambda: self.auto_commands(False),
"/llava flow": lambda: self.llava_flow(True),
"/llava freeze": lambda: self.llava_flow(False),
"/auto on": lambda: self.auto_speech_set(True),
"/auto off": lambda: self.auto_speech_set(False),
"/quit": lambda: self.ollama_command_instance.quit(),
"/ollama create": lambda: self.ollama_command_instance.ollama_create(),
"/ollama show": lambda: self.ollama_command_instance.ollama_show_modelfile(),
"/ollama template": lambda: self.ollama_command_instance.ollama_show_template(),
"/ollama license": lambda: self.ollama_command_instance.ollama_show_license(),
"/ollama list": lambda: self.ollama_command_instance.ollama_list(),
"/ollama loaded": lambda: self.ollama_command_instance.ollama_show_loaded_models(),
"/splice video": lambda: self.data_set_video_process_instance.generate_image_data(),
"/developer new" : lambda: self.read_write_symbol_collector_instance.developer_tools_generate(),
"/start node": lambda: self.FileSharingNode_instance.start_node(),
"/synthetic generator": lambda: self.generate_synthetic_data(),
"/convert wav": lambda: self.data_set_video_process_instance.call_convert()